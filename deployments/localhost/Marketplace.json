{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Marketplace__NftAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__NftUnAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__NftUnlisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__NotNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Marketplace__SelfNftPurchaseNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__UnsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredPrice",
          "type": "uint256"
        }
      ],
      "name": "Marketplace__UnsufficientPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__WithdrawalError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftListedOn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "NftPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftUnlisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNft",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Marketplace.NftItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlistNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateNftPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe2251b4bc803cdaf83a19b10d54624c46b64eb228e7769cd309bf60df6d614f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1379073",
    "logsBloom": "0x
    "blockHash": "0x454f16a1f8e9269aed74a72c2c05ce0199810c377d573d2e215949df10886220",
    "transactionHash": "0xfe2251b4bc803cdaf83a19b10d54624c46b64eb228e7769cd309bf60df6d614f",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1379073",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f5a1478cc0891247ea308b9c5d92909e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Marketplace__NftAlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__NftUnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__NftUnlisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__NotNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Marketplace__SelfNftPurchaseNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__UnsufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredPrice\",\"type\":\"uint256\"}],\"name\":\"Marketplace__UnsufficientPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__WithdrawalError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftListedOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"NftPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftUnlisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNft\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Marketplace.NftItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlistNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateNftPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyNft(address,uint256)\":{\"details\":\"Allows to purchase only listed, Unpossesed NftsUses NonReentrant security Open Zeppeling implementation\",\"params\":{\"nftAddress\":\"Nft Address\",\"tokenId\":\"Nft Token ID\"}},\"listNft(address,uint256,uint256)\":{\"details\":\"This way we allow owners still owen thei nft as they list on the marketplace\",\"params\":{\"nftAddress\":\": Address of the NFT\",\"price\":\": price of the NFT\",\"tokenId\":\": token ID of the NFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyNft(address,uint256)\":{\"notice\":\"This function transfer safely the ownership of a NFT\"},\"listNft(address,uint256,uint256)\":{\"notice\":\"Method for listing an NFT on the marketplace\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Marketplace is ReentrancyGuard {\\n    struct NftItem {\\n        uint256 price;\\n        address owner;\\n    }\\n\\n    mapping(address => mapping(uint256 => NftItem)) s_nfts;\\n    mapping(address => uint256) s_sellings;\\n\\n    event NftListedOn(address indexed nftAddress, uint256 tokenId, uint256 price);\\n    event NftPurchased(address indexed nftAddress, uint256 tokenId, uint256 price);\\n    event NftUnlisted(address indexed nftAddress, uint256 tokenId);\\n    event NftPriceUpdated(address indexed nftAddress, uint256 tokenId, uint256 newPrice);\\n\\n    error Marketplace__PriceMustBeAboveZero();\\n    error Marketplace__NftUnAuthorized();\\n    error Marketplace__NftAlreadyListed();\\n    error Marketplace__NotNftOwner();\\n    error Marketplace__NftUnlisted();\\n    error Marketplace__UnsufficientPrice(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 requiredPrice\\n    );\\n    error Marketplace__UnsufficientFunds();\\n    error Marketplace__WithdrawalError();\\n    error Marketplace__SelfNftPurchaseNotAllowed(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address owner\\n    );\\n\\n    modifier onlyUnlisted(address nftAddress, uint256 tokenId) {\\n        NftItem memory nft = s_nfts[nftAddress][tokenId];\\n        if (nft.price > 0) revert Marketplace__NftAlreadyListed();\\n\\n        _;\\n    }\\n\\n    modifier onlyOwner(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address spender\\n    ) {\\n        IERC721 nft = IERC721(nftAddress);\\n        address owner = nft.ownerOf(tokenId);\\n        if (owner != spender) revert Marketplace__NotNftOwner();\\n\\n        _;\\n    }\\n\\n    modifier onlyListed(address nftAddress, uint256 tokenId) {\\n        NftItem memory nft = s_nfts[nftAddress][tokenId];\\n        if (nft.price <= 0) revert Marketplace__NftUnlisted();\\n\\n        _;\\n    }\\n\\n    modifier onlyUnpossed(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address buyer\\n    ) {\\n        NftItem memory nft = s_nfts[nftAddress][tokenId];\\n        if (nft.owner == buyer)\\n            revert Marketplace__SelfNftPurchaseNotAllowed(nftAddress, tokenId, nft.owner);\\n\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Method for listing an NFT on the marketplace\\n     * @param nftAddress : Address of the NFT\\n     * @param tokenId : token ID of the NFT\\n     * @param price : price of the NFT\\n     * @dev This way we allow owners still owen thei nft as they list on the marketplace\\n     */\\n    function listNft(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 price\\n    ) external onlyOwner(nftAddress, tokenId, msg.sender) onlyUnlisted(nftAddress, tokenId) {\\n        if (price <= 0) revert Marketplace__PriceMustBeAboveZero();\\n\\n        IERC721 nft = IERC721(nftAddress);\\n\\n        if (nft.getApproved(tokenId) != address(this)) revert Marketplace__NftUnAuthorized();\\n\\n        s_nfts[nftAddress][tokenId] = NftItem(price, msg.sender);\\n\\n        emit NftListedOn(nftAddress, tokenId, price);\\n    }\\n\\n    /**\\n     * @notice This function transfer safely the ownership of a NFT\\n     * @param nftAddress Nft Address\\n     * @param tokenId Nft Token ID\\n     * @dev Allows to purchase only listed, Unpossesed Nfts\\n     * @dev Uses NonReentrant security Open Zeppeling implementation\\n     */\\n\\n    function buyNft(\\n        address nftAddress,\\n        uint256 tokenId\\n    )\\n        external\\n        payable\\n        onlyListed(nftAddress, tokenId)\\n        onlyUnpossed(nftAddress, tokenId, msg.sender)\\n    {\\n        NftItem memory nft = s_nfts[nftAddress][tokenId];\\n\\n        if (nft.price != msg.value)\\n            revert Marketplace__UnsufficientPrice(nftAddress, tokenId, nft.price);\\n\\n        s_sellings[nft.owner] += msg.value;\\n        delete s_nfts[nftAddress][tokenId];\\n        IERC721(nftAddress).safeTransferFrom(nft.owner, msg.sender, tokenId);\\n\\n        emit NftPurchased(nftAddress, tokenId, nft.price);\\n    }\\n\\n    function unlistNft(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external onlyOwner(nftAddress, tokenId, msg.sender) onlyListed(nftAddress, tokenId) {\\n        delete s_nfts[nftAddress][tokenId];\\n        emit NftUnlisted(nftAddress, tokenId);\\n    }\\n\\n    function updateNftPrice(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 newPrice\\n    ) external onlyOwner(nftAddress, tokenId, msg.sender) onlyListed(nftAddress, tokenId) {\\n        s_nfts[nftAddress][tokenId].price = newPrice;\\n        emit NftPriceUpdated(nftAddress, tokenId, newPrice);\\n    }\\n\\n    function withdrawBalance() external nonReentrant {\\n        uint256 balance = s_sellings[msg.sender];\\n        if (balance <= 0) revert Marketplace__UnsufficientFunds();\\n\\n        s_sellings[msg.sender] = 0;\\n\\n        (bool success, ) = payable(msg.sender).call{value: balance}(\\\"\\\");\\n        if (!success) revert Marketplace__WithdrawalError();\\n    }\\n\\n    function getNft(address nftAddress, uint256 tokenId) public view returns (NftItem memory) {\\n        return s_nfts[nftAddress][tokenId];\\n    }\\n\\n    function balanceOf(address seller) public view returns (uint256) {\\n        return s_sellings[seller];\\n    }\\n}\\n\",\"keccak256\":\"0x93187aa7df6dae194f98ee74b680e1c271db9a4d6e833c6f37d3166e3905f18f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000819055506117ae806100286000396000f3fe6080604052600436106100705760003560e01c80635fd8c7101161004e5780635fd8c710146100f7578063634d0d501461010e57806370a0823114610137578063c922b17c1461017457610070565b80631c6932b6146100755780634ddf4f8f146100b257806354e6448e146100ce575b600080fd5b34801561008157600080fd5b5061009c600480360381019061009791906113e1565b61019d565b6040516100a9919061146e565b60405180910390f35b6100cc60048036038101906100c791906113e1565b610268565b005b3480156100da57600080fd5b506100f560048036038101906100f091906113e1565b610763565b005b34801561010357600080fd5b5061010c610a28565b005b34801561011a57600080fd5b5061013560048036038101906101309190611489565b610ba2565b005b34801561014357600080fd5b5061015e600480360381019061015991906114dc565b610e41565b60405161016b9190611518565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190611489565b610e8a565b005b6101a5611318565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610367576040517f23c6434a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484336000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036104a557838382602001516040517f582a35db00000000000000000000000000000000000000000000000000000000815260040161049c93929190611542565b60405180910390fd5b6000600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050348160000151146105b457898982600001516040517fa70566b80000000000000000000000000000000000000000000000000000000081526004016105ab93929190611579565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060791906115df565b92505081905550600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff166342842e0e8260200151338c6040518463ffffffff1660e01b81526004016106d193929190611613565b600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050508973ffffffffffffffffffffffffffffffffffffffff167f7ce94e86eb25438639e252c1c285f9cade0bffa29864576f04c726016670a8588a836000015160405161074f92919061164a565b60405180910390a250505050505050505050565b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016107a69190611518565b602060405180830381865afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e79190611688565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461084e576040517f8dad9bbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511161094d576040517f23c6434a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff167e38f3e47004950b890d9df255df5e1b6921cf589f4b44b2259df500959366648a604051610a149190611518565b60405180910390a250505050505050505050565b610a306112bf565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610aae576040517fde9a119c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610b19906116e6565b60006040518083038185875af1925050503d8060008114610b56576040519150601f19603f3d011682016040523d82523d6000602084013e610b5b565b606091505b5050905080610b96576040517fdb3cd3d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050610ba061130e565b565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610be59190611518565b602060405180830381865afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190611688565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c8d576040517f8dad9bbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87876000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610d8c576040517f23c6434a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600001819055508a73ffffffffffffffffffffffffffffffffffffffff167f89b523c9b50141013ca880ba24a6d3655ba93bdae1df11a92b4dfbb84f8b14508b8b604051610e2c92919061164a565b60405180910390a25050505050505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610ecd9190611518565b602060405180830381865afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e9190611688565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f75576040517f8dad9bbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87876000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115611075576040517fa9fb5de000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089116110af576040517f2bc9480800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b81526004016111049190611518565b602060405180830381865afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611688565b73ffffffffffffffffffffffffffffffffffffffff1614611192576040517f47893d0300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b73ffffffffffffffffffffffffffffffffffffffff167f9e024a26a0af043fec3240bdaf07fb9d31cb9ef921ecf1570848c77a049e8d848c8c6040516112a992919061164a565b60405180910390a2505050505050505050505050565b600260005403611304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fb90611758565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113788261134d565b9050919050565b6113888161136d565b811461139357600080fd5b50565b6000813590506113a58161137f565b92915050565b6000819050919050565b6113be816113ab565b81146113c957600080fd5b50565b6000813590506113db816113b5565b92915050565b600080604083850312156113f8576113f7611348565b5b600061140685828601611396565b9250506020611417858286016113cc565b9150509250929050565b61142a816113ab565b82525050565b6114398161136d565b82525050565b6040820160008201516114556000850182611421565b5060208201516114686020850182611430565b50505050565b6000604082019050611483600083018461143f565b92915050565b6000806000606084860312156114a2576114a1611348565b5b60006114b086828701611396565b93505060206114c1868287016113cc565b92505060406114d2868287016113cc565b9150509250925092565b6000602082840312156114f2576114f1611348565b5b600061150084828501611396565b91505092915050565b611512816113ab565b82525050565b600060208201905061152d6000830184611509565b92915050565b61153c8161136d565b82525050565b60006060820190506115576000830186611533565b6115646020830185611509565b6115716040830184611533565b949350505050565b600060608201905061158e6000830186611533565b61159b6020830185611509565b6115a86040830184611509565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115ea826113ab565b91506115f5836113ab565b925082820190508082111561160d5761160c6115b0565b5b92915050565b60006060820190506116286000830186611533565b6116356020830185611533565b6116426040830184611509565b949350505050565b600060408201905061165f6000830185611509565b61166c6020830184611509565b9392505050565b6000815190506116828161137f565b92915050565b60006020828403121561169e5761169d611348565b5b60006116ac84828501611673565b91505092915050565b600081905092915050565b50565b60006116d06000836116b5565b91506116db826116c0565b600082019050919050565b60006116f1826116c3565b9150819050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611742601f836116fb565b915061174d8261170c565b602082019050919050565b6000602082019050818103600083015261177181611735565b905091905056fea2646970667358221220ae18e3e0815f724a5acd530340e02cb5cbeb89b0e6aa1b55d638abd3cb707be664736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80635fd8c7101161004e5780635fd8c710146100f7578063634d0d501461010e57806370a0823114610137578063c922b17c1461017457610070565b80631c6932b6146100755780634ddf4f8f146100b257806354e6448e146100ce575b600080fd5b34801561008157600080fd5b5061009c600480360381019061009791906113e1565b61019d565b6040516100a9919061146e565b60405180910390f35b6100cc60048036038101906100c791906113e1565b610268565b005b3480156100da57600080fd5b506100f560048036038101906100f091906113e1565b610763565b005b34801561010357600080fd5b5061010c610a28565b005b34801561011a57600080fd5b5061013560048036038101906101309190611489565b610ba2565b005b34801561014357600080fd5b5061015e600480360381019061015991906114dc565b610e41565b60405161016b9190611518565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190611489565b610e8a565b005b6101a5611318565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610367576040517f23c6434a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484336000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036104a557838382602001516040517f582a35db00000000000000000000000000000000000000000000000000000000815260040161049c93929190611542565b60405180910390fd5b6000600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050348160000151146105b457898982600001516040517fa70566b80000000000000000000000000000000000000000000000000000000081526004016105ab93929190611579565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060791906115df565b92505081905550600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff166342842e0e8260200151338c6040518463ffffffff1660e01b81526004016106d193929190611613565b600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050508973ffffffffffffffffffffffffffffffffffffffff167f7ce94e86eb25438639e252c1c285f9cade0bffa29864576f04c726016670a8588a836000015160405161074f92919061164a565b60405180910390a250505050505050505050565b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016107a69190611518565b602060405180830381865afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e79190611688565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461084e576040517f8dad9bbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511161094d576040517f23c6434a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff167e38f3e47004950b890d9df255df5e1b6921cf589f4b44b2259df500959366648a604051610a149190611518565b60405180910390a250505050505050505050565b610a306112bf565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610aae576040517fde9a119c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610b19906116e6565b60006040518083038185875af1925050503d8060008114610b56576040519150601f19603f3d011682016040523d82523d6000602084013e610b5b565b606091505b5050905080610b96576040517fdb3cd3d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050610ba061130e565b565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610be59190611518565b602060405180830381865afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190611688565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c8d576040517f8dad9bbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87876000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610d8c576040517f23c6434a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600001819055508a73ffffffffffffffffffffffffffffffffffffffff167f89b523c9b50141013ca880ba24a6d3655ba93bdae1df11a92b4dfbb84f8b14508b8b604051610e2c92919061164a565b60405180910390a25050505050505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610ecd9190611518565b602060405180830381865afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e9190611688565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f75576040517f8dad9bbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87876000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115611075576040517fa9fb5de000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089116110af576040517f2bc9480800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b81526004016111049190611518565b602060405180830381865afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611688565b73ffffffffffffffffffffffffffffffffffffffff1614611192576040517f47893d0300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b73ffffffffffffffffffffffffffffffffffffffff167f9e024a26a0af043fec3240bdaf07fb9d31cb9ef921ecf1570848c77a049e8d848c8c6040516112a992919061164a565b60405180910390a2505050505050505050505050565b600260005403611304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fb90611758565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113788261134d565b9050919050565b6113888161136d565b811461139357600080fd5b50565b6000813590506113a58161137f565b92915050565b6000819050919050565b6113be816113ab565b81146113c957600080fd5b50565b6000813590506113db816113b5565b92915050565b600080604083850312156113f8576113f7611348565b5b600061140685828601611396565b9250506020611417858286016113cc565b9150509250929050565b61142a816113ab565b82525050565b6114398161136d565b82525050565b6040820160008201516114556000850182611421565b5060208201516114686020850182611430565b50505050565b6000604082019050611483600083018461143f565b92915050565b6000806000606084860312156114a2576114a1611348565b5b60006114b086828701611396565b93505060206114c1868287016113cc565b92505060406114d2868287016113cc565b9150509250925092565b6000602082840312156114f2576114f1611348565b5b600061150084828501611396565b91505092915050565b611512816113ab565b82525050565b600060208201905061152d6000830184611509565b92915050565b61153c8161136d565b82525050565b60006060820190506115576000830186611533565b6115646020830185611509565b6115716040830184611533565b949350505050565b600060608201905061158e6000830186611533565b61159b6020830185611509565b6115a86040830184611509565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115ea826113ab565b91506115f5836113ab565b925082820190508082111561160d5761160c6115b0565b5b92915050565b60006060820190506116286000830186611533565b6116356020830185611533565b6116426040830184611509565b949350505050565b600060408201905061165f6000830185611509565b61166c6020830184611509565b9392505050565b6000815190506116828161137f565b92915050565b60006020828403121561169e5761169d611348565b5b60006116ac84828501611673565b91505092915050565b600081905092915050565b50565b60006116d06000836116b5565b91506116db826116c0565b600082019050919050565b60006116f1826116c3565b9150819050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611742601f836116fb565b915061174d8261170c565b602082019050919050565b6000602082019050818103600083015261177181611735565b905091905056fea2646970667358221220ae18e3e0815f724a5acd530340e02cb5cbeb89b0e6aa1b55d638abd3cb707be664736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyNft(address,uint256)": {
        "details": "Allows to purchase only listed, Unpossesed NftsUses NonReentrant security Open Zeppeling implementation",
        "params": {
          "nftAddress": "Nft Address",
          "tokenId": "Nft Token ID"
        }
      },
      "listNft(address,uint256,uint256)": {
        "details": "This way we allow owners still owen thei nft as they list on the marketplace",
        "params": {
          "nftAddress": ": Address of the NFT",
          "price": ": price of the NFT",
          "tokenId": ": token ID of the NFT"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyNft(address,uint256)": {
        "notice": "This function transfer safely the ownership of a NFT"
      },
      "listNft(address,uint256,uint256)": {
        "notice": "Method for listing an NFT on the marketplace"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2758,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "s_nfts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftItem)2751_storage))"
      },
      {
        "astId": 2762,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "s_sellings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftItem)2751_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Marketplace.NftItem))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NftItem)2751_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(NftItem)2751_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.NftItem)",
        "numberOfBytes": "32",
        "value": "t_struct(NftItem)2751_storage"
      },
      "t_struct(NftItem)2751_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.NftItem",
        "members": [
          {
            "astId": 2748,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2750,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}